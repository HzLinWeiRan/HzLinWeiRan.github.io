'use strict';

var _deps = require('./deps');

var _check = require('./check');

var _check2 = _interopRequireDefault(_check);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// get only the directory without file name.
var directory = function directory(dir) {
  return _check2.default.isDir(dir) ? dir : _deps.path.parse(dir).dir;
};

// get the file name form directory.
var fileName = function fileName(dir) {
  return !_check2.default.isDir(dir) && _deps.path.parse(dir).base;
};

/*
  following functions use to get file extension.
*/

// check if fileName starts with dot.
var isStartWithDot = function isStartWithDot(str, cb) {
  return cb(str.slice(0, 1) === '.');
};

// split the name by dot.
var splitByDot = function splitByDot(str) {
  return str.split('.');
};

// gets the first array elem from split; like .env
var splitDotFrmStart = function splitDotFrmStart(str) {
  return splitByDot(str)[1];
};

// gets the last array elem from split; like .txt
var splitDotFrmEnd = function splitDotFrmEnd(str) {
  var snm = splitByDot(str);
  return snm[snm.length - 1];
};

// get the file extension form directory.
var fileExt = function fileExt(dir) {
  var fn = fileName(dir);
  if (fn) {
    // if fn invalid, fileName will returns false.
    return isStartWithDot(fn, function (withDot) {
      return withDot ? splitDotFrmStart(fn) : splitDotFrmEnd(fn);
    });
  }
  // return false when we have invalid fn
  return fn;
};

/**
 * returns directory stats, as object
 *
 * @param {string} dir  - directory.
 * @callback {Requester~requestCallback}
 *
 * @returns
 * @typedef {Object} dirStat
 * @property {Boolean} - isValid, exists or not.
 * @property {Boolean} - isDir, if any.
 * @property {Boolean} - isFile, if any.
 * @property {number} - size of file if avaliable.
 */
var dirStat = function dirStat(dir, cb) {
  return _deps.fs.stat(dir, function (err, stats) {
    var isValid = void 0;
    var isDir = void 0;
    var isFile = void 0;
    var size = void 0;
    if (err) {
      // file or dir is not exist.
      if (err.code === 'ENOENT') {
        isValid = false;
        size = 0;
        if (_check2.default.isDir(dir)) {
          isDir = true;
          isFile = false;
        } else if (_check2.default.isFile(dir)) {
          isDir = false;
          isFile = true;
        } else {
          isDir = false;
          isFile = false;
        }
        return cb(null, {
          isValid: isValid,
          isDir: isDir,
          isFile: isFile,
          size: size
        });
      }
      return cb(err);
    }
    isValid = true;
    size = stats.size;
    if (stats.isDirectory()) {
      isDir = true;
      isFile = false;
    } else {
      isDir = false;
      isFile = true;
    }
    // all valid
    return cb(null, {
      isValid: isValid,
      isDir: isDir,
      isFile: isFile,
      size: size
    });
  });
};

module.exports = {
  // get
  directory: directory,
  fileName: fileName,
  fileExt: fileExt,
  dirStat: dirStat
};